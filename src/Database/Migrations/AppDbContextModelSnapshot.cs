// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("PlaylistType")
                        .HasColumnType("integer");

                    b.Property<int>("PresetId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Playlists", (string)null);

                    b.HasDiscriminator<int>("PlaylistType");
                });

            modelBuilder.Entity("Database.Entities.Preset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Presets");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CurrentPresetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPresetId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Entities.HistoryPlaylist", b =>
                {
                    b.HasBaseType("Database.Entities.Playlist");

                    b.HasIndex("PresetId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Database.Entities.SourcePlaylist", b =>
                {
                    b.HasBaseType("Database.Entities.Playlist");

                    b.HasIndex("PresetId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Database.Entities.TargetPlaylist", b =>
                {
                    b.HasBaseType("Database.Entities.Playlist");

                    b.Property<bool>("Overwrite")
                        .HasColumnType("boolean");

                    b.HasIndex("PresetId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Database.Entities.Preset", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Presets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Entities.Settings", "Settings", b1 =>
                        {
                            b1.Property<int>("PresetId")
                                .HasColumnType("integer");

                            b1.Property<bool?>("IncludeLikedTracks")
                                .HasColumnType("boolean");

                            b1.Property<int>("PlaylistSize")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(20);

                            b1.HasKey("PresetId");

                            b1.ToTable("Presets");

                            b1.WithOwner()
                                .HasForeignKey("PresetId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.HasOne("Database.Entities.Preset", "CurrentPreset")
                        .WithOne()
                        .HasForeignKey("Database.Entities.User", "CurrentPresetId");

                    b.Navigation("CurrentPreset");
                });

            modelBuilder.Entity("Database.Entities.HistoryPlaylist", b =>
                {
                    b.HasOne("Database.Entities.Preset", "Preset")
                        .WithMany("HistoryPlaylists")
                        .HasForeignKey("PresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");
                });

            modelBuilder.Entity("Database.Entities.SourcePlaylist", b =>
                {
                    b.HasOne("Database.Entities.Preset", "Preset")
                        .WithMany("SourcePlaylists")
                        .HasForeignKey("PresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");
                });

            modelBuilder.Entity("Database.Entities.TargetPlaylist", b =>
                {
                    b.HasOne("Database.Entities.Preset", "Preset")
                        .WithMany("TargetPlaylists")
                        .HasForeignKey("PresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");
                });

            modelBuilder.Entity("Database.Entities.Preset", b =>
                {
                    b.Navigation("HistoryPlaylists");

                    b.Navigation("SourcePlaylists");

                    b.Navigation("TargetPlaylists");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Presets");
                });
#pragma warning restore 612, 618
        }
    }
}
