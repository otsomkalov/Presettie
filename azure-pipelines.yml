trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  Runtime: 'linux-x64'
  BuildConfiguration: 'Release'

stages:
  - stage: build
    displayName: 'Build'
    jobs:
      - job: build_all
        steps:
          - task: UseDotNet@2
            inputs:
              version: '9.x'
          - task: DotNetCoreCLI@2
            name: Restore
            inputs:
              command: 'restore'
              projects: 'src/**/**.fsproj'
              arguments: '-r $(Runtime) --configuration $(BuildConfiguration)'
          - task: DotNetCoreCLI@2
            displayName: 'Build Telegram Bot in Azure Functions'
            inputs:
              command: 'build'
              projects: 'src/**/Functions.Bot.Telegram.fsproj'
              arguments: '-r $(Runtime) --configuration $(BuildConfiguration)'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            displayName: 'Build Azure Functions Web API'
            inputs:
              command: 'build'
              projects: 'src/**/Functions.API.fsproj'
              arguments: '-r $(Runtime) --configuration $(BuildConfiguration)'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            displayName: 'Build Bolero Web'
            inputs:
              command: 'build'
              projects: 'src/**/Bolero.Web.fsproj'
              arguments: '--configuration $(BuildConfiguration)'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            displayName: 'Run all tests'
            inputs:
              command: 'test'
              projects: 'tests/**/**.fsproj'
              arguments: '-r $(Runtime) --configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'
          - task: PublishCodeCoverageResults@2
            displayName: 'Publish coverage'
            inputs:
              summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
          - task: DotNetCoreCLI@2
            displayName: 'Publish Telegram Bot'
            inputs:
              command: 'publish'
              projects: 'src/**/Functions.Bot.Telegram.fsproj'
              arguments: '-r $(Runtime) -o $(Build.ArtifactStagingDirectory)/Generator /p:InformationalVersion=$(Build.BuildNumber)'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            displayName: 'Publish Azure Functions Web API'
            inputs:
              command: 'publish'
              projects: 'src/**/Functions.API.fsproj'
              arguments: '-r $(Runtime) -o $(Build.ArtifactStagingDirectory)/Functions.API /p:InformationalVersion=$(Build.BuildNumber)'
              publishWebProjects: false
          - task: DotNetCoreCLI@2
            displayName: 'Publish Bolero Web'
            inputs:
              command: 'publish'
              projects: 'src/**/Bolero.Web.fsproj'
              arguments: '-r $(Runtime) -o $(Build.ArtifactStagingDirectory) /p:InformationalVersion=$(Build.BuildNumber)'
              publishWebProjects: false
              zipAfterPublish: false
          - task: PublishBuildArtifacts@1
            displayName: 'Pack Telegram Bot'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/Functions.Bot.Telegram'
              ArtifactName: 'Functions.Telegram.Bot'
          - task: PublishBuildArtifacts@1
            displayName: 'Pack Azure Functions Web API'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/Functions.API'
              ArtifactName: 'Functions.API'
          - task: PublishBuildArtifacts@1
            displayName: 'Pack Bolero Web'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/Bolero.Web/wwwroot'
              ArtifactName: 'Bolero.Web'
  - stage: deploy_dev
    displayName: 'Deploy DEV'
    trigger: manual
    variables:
      - group: dev
    jobs:
      - deployment: deploy_bot
        displayName: 'Deploy Telegram Bot on Azure Functions'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: Functions.Telegram.Bot
                - task: AzureFunctionApp@2
                  inputs:
                    azureSubscription: '$(subscription)'
                    appType: 'functionAppLinux'
                    appName: '$(bot-functions-name)'
                    package: '$(Pipeline.Workspace)/**/*.zip'
      - deployment: deploy_api
        displayName: 'Deploy Azure Functions Web API'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: Functions.API

                - task: AzureFunctionApp@2
                  inputs:
                    azureSubscription: '$(subscription)'
                    appType: 'functionAppLinux'
                    appName: '$(api-functions-name)'
                    package: '$(Pipeline.Workspace)/**/*.zip'
      - job: deploy_web
        displayName: 'Deploy Bolero Web'
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'Bolero.Web'
              targetPath: '$(Build.ArtifactStagingDirectory)/Bolero.Web'
          - task: AzureCLI@2
            displayName: 'Copy Bolero Web to Blob Storage'
            inputs:
              azureSubscription: '$(subscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload-batch \
                  --auth-mode login \
                  --account-name $(web-storage-account) \
                  -d '$web' \
                  -s $(Build.ArtifactStagingDirectory)/Bolero.Web/ \
                  --overwrite \
                  --no-progress
  - stage: deploy_prd
    displayName: 'Deploy PRD'
    variables:
      - group: prd
    jobs:
      - deployment: deploy_bot
        displayName: 'Deploy Telegram Bot on Azure Functions'
        environment: 'prd'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: Functions.Telegram.Bot

                - task: AzureFunctionApp@2
                  inputs:
                    azureSubscription: '$(subscription)'
                    appType: 'functionAppLinux'
                    appName: '$(bot-functions-name)'
                    package: '$(Pipeline.Workspace)/**/*.zip'
      - deployment: deploy_api
        displayName: 'Deploy Azure Functions Web API'
        environment: 'prd'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: Functions.API

                - task: AzureFunctionApp@2
                  inputs:
                    azureSubscription: '$(subscription)'
                    appType: 'functionAppLinux'
                    appName: '$(api-functions-name)'
                    package: '$(Pipeline.Workspace)/**/*.zip'
      - job: deploy_web
        displayName: 'Deploy Bolero Web'
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'Bolero.Web'
              targetPath: '$(Build.ArtifactStagingDirectory)/Bolero.Web'
          - task: AzureCLI@2
            displayName: 'Copy Bolero Web to Blob Storage'
            inputs:
              azureSubscription: '$(subscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload-batch \
                  --auth-mode login \
                  --account-name $(web-storage-account) \
                  -d '$web' \
                  -s $(Build.ArtifactStagingDirectory)/Bolero.Web/ \
                  --overwrite \
                  --no-progress
